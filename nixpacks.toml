# nixpacks.toml

#[phases.install]
# This command will run *before* Nixpacks tries to install your requirements.txt
#cmds_prepend = ["python -m pip install --upgrade pip setuptools wheel"]
# In your nixpacks.toml
[start]
  # This command attempts to get the version, log it, and keep the container alive.
  cmd = "sh -c 'echo \"NIXPACKS_START_CMD: Attempting to get Chromium version...\" && \
              if [ -f /usr/bin/chromium-browser ]; then \
                echo \"NIXPACKS_START_CMD: /usr/bin/chromium-browser found.\"; \
                /usr/bin/chromium-browser --version > /tmp/chromium_version.txt 2>&1; \
                echo \"NIXPACKS_START_CMD: Output of version command (if any):\"; \
                cat /tmp/chromium_version.txt; \
                echo \"NIXPACKS_START_CMD: Chromium version check complete. Content of /tmp/chromium_version.txt printed above.\"; \
              else \
                echo \"NIXPACKS_START_CMD: ERROR - /usr/bin/chromium-browser NOT FOUND.\"; \
              fi && \
              echo \"NIXPACKS_START_CMD: Diagnostic finished. Sleeping for 300 seconds to allow log inspection...\" && \
              sleep 300'"
[phases.setup]
  aptPkgs = [
    # Use Chromium browser and its chromedriver from Ubuntu's repositories
    "chromium-browser",
    "chromium-chromedriver",

    # Essential libraries for Chromium/Chromedriver
    "libglib2.0-0",
    "libnss3",
    "libfontconfig1",
    "libx11-6",
    "libxcb1",
    "libxcomposite1",
    "libxrandr2",
    "libxrender1",
    "libxtst6",

    # For HTTPS and fonts
    "ca-certificates",
    "fonts-liberation",

    # Additional libraries (using libasound2t64 for Ubuntu Noble)
    "libasound2t64",          # Explicitly use the t64 version for sound
    "libatk-bridge2.0-0",
    "libatk1.0-0",
    "libcups2",
    "libdbus-1-3",
    "libgdk-pixbuf2.0-0",
    "libgtk-3-0",
    "libpango-1.0-0",
    "libpangocairo-1.0-0",
    "xdg-utils"
  ]
#[start]
  # This command will print the version and then exit.
  #cmd = "/usr/bin/chromium-browser --version && echo 'Chromium version was printed above. Exiting diagnostic mode.' && exit 0"